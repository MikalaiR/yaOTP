import 'dart:math';
import 'dart:typed_data';

import 'package:base32/base32.dart';
import 'package:pointycastle/api.dart';
import 'package:pointycastle/digests/sha1.dart';
import 'package:pointycastle/digests/sha256.dart';
import 'package:pointycastle/digests/sha384.dart';
import 'package:pointycastle/digests/sha512.dart';
import 'package:pointycastle/macs/hmac.dart';

abstract class TOTPGenerator {
  static Uint8List _int64BigEndianBytes(int value) =>
      Uint8List(8)..buffer.asByteData().setInt64(0, value, Endian.big);

  static int _formatTime(DateTime time, int interval) {
    return time.millisecondsSinceEpoch ~/ (1000 * interval);
  }

  static String generateTOTP(
    String secret,
    String algorithm,
    int interval,
    int digits,
    DateTime time,
  ) {
    final Uint8List hmacKey = base32.decode(secret);

    final HMac hmacAlgorithm = (() {
      switch (algorithm) {
        case "SHA1":
          return HMac.withDigest(SHA1Digest());
        case "SHA256":
          return HMac.withDigest(SHA256Digest());
        case "SHA384":
          return HMac.withDigest(SHA384Digest());
        case "SHA512":
          return HMac.withDigest(SHA512Digest());
        default:
          return HMac.withDigest(SHA1Digest());
      }
    })()
      ..init(KeyParameter(hmacKey));

    final Uint8List hmac = hmacAlgorithm
        .process(_int64BigEndianBytes(_formatTime(time, interval)));

    int offset = hmac[hmac.length - 1] & 0xf;

    int code = ((hmac[offset] & 0x7f) << 24 |
        (hmac[offset + 1] & 0xff) << 16 |
        (hmac[offset + 2] & 0xff) << 8 |
        (hmac[offset + 3] & 0xff));

    return (code % pow(10, digits)).toString().padLeft(digits, '0');
  }
}
